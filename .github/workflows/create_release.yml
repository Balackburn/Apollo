name: build release

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      apollo_ipa_url:
        description: 'Apollo .ipa URL'
        required: false
        default: 'https://files.catbox.moe/o2lue0.ipa'
      catbox_upload:
        description: 'Upload to Catbox.moe'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.13'
  APOLLO_IPA_URL: ${{ inputs.apollo_ipa_url || 'https://files.catbox.moe/o2lue0.ipa' }}
  CATBOX_UPLOAD: ${{ inputs.catbox_upload == 'false' }}
  GITHUB_API_URL: "https://api.github.com/repos/JeffreyCA/Apollo-ImprovedCustomApi/releases/latest"
  PYZULE_RW_URL: "https://github.com/asdfzxcvbn/pyzule-rw/archive/main.zip"

jobs:
  build-apollo-ipa:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION}}"

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install --force-reinstall "${{ env.PYZULE_RW_URL }}"

      - name: Install ldid
        run: brew install ldid

      - name: Fetch latest release information
        id: get-release
        run: |
          RESPONSE=$(curl -s "${{ env.GITHUB_API_URL }}")
          if [ -z "$RESPONSE" ]; then
            echo "Error: Failed to fetch release data!"
            exit 1
          fi

          RELEASE_TAG=$(jq -r '.tag_name' <<< "$RESPONSE")
          RELEASE_NOTES=$(jq -r '.body' <<< "$RESPONSE")

          DEB_URL=$(jq -r '.assets[] | select(.name | test("iphoneos-arm64_rootless.deb$")) | .browser_download_url' <<< "$RESPONSE")

          if [ -z "$DEB_URL" ] || [ "$DEB_URL" == "null" ]; then
            echo "Error: No matching .deb file found!"
            exit 1
          fi

          echo "RELEASE_TAG=${RELEASE_TAG}" >> "$GITHUB_OUTPUT"
          {
            echo "RELEASE_NOTES<<EOF"
            echo "$RELEASE_NOTES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          echo "DEB_URL=${DEB_URL}" >> "$GITHUB_OUTPUT"

      - name: Download apollo .ipa and improvedcustomapi .deb
        id: download-files
        env:
          DEB_URL: ${{ steps.get-release.outputs.DEB_URL }}
          RELEASE_TAG: ${{ steps.get-release.outputs.RELEASE_TAG }}
        run: |
          curl -L "$APOLLO_IPA_URL" -o Apollo.ipa
          APOLLO_VERSION=$(unzip -p Apollo.ipa 'Payload/*.app/Info.plist' | grep -A1 'CFBundleShortVersionString' | grep string | sed -E 's/<string>(.*)<\/string>/\1/' | tr -d '[:space:]')

          curl -L "$DEB_URL" -o improvedcustomapi.deb

          ICA_VERSION=$(echo "$RELEASE_TAG" | sed -nE 's/v(.+)/\1/p')

          echo "APOLLO_VERSION=${APOLLO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "ICA_VERSION=$ICA_VERSION" >> "$GITHUB_OUTPUT"
          echo "OUTPUT_NAME=Apollo-${APOLLO_VERSION}_ImprovedCustomApi-${ICA_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Setup build folders
        env:
            OUTPUT_NAME: ${{ steps.download-files.outputs.OUTPUT_NAME }}
        run: |
          mkdir -p "${OUTPUT_NAME}/Payload"
          mkdir -p "NO-EXTENSIONS_${OUTPUT_NAME}/Payload"

      - name: Build modified .ipa
        env:
            OUTPUT_NAME: ${{ steps.download-files.outputs.OUTPUT_NAME }}
        working-directory: ${{ steps.download-files.outputs.OUTPUT_NAME }}
        run: |
          cyan -i "${GITHUB_WORKSPACE}/Apollo.ipa" -o "Payload/Apollo.app" -f "${GITHUB_WORKSPACE}/improvedcustomapi.deb" --fakesign
          echo "Zipping ${OUTPUT_NAME}.ipa"
          zip -6 -rq "${OUTPUT_NAME}.ipa" "Payload" -x "*/.*"

          echo "Updating build version in Apollo Executable!"
          echo "Previous $(vtool -show-build Payload/Apollo.app/Apollo)"
          vtool -set-build-version ios 15.0 19.0 -replace -output "Payload/Apollo.app/Apollo" "Payload/Apollo.app/Apollo"
          echo "Updated $(vtool -show-build Payload/Apollo.app/Apollo)"

          echo "Checking for duplicate LC_RPATH entries..."
          executable_path_count=$(otool -l "Payload/Apollo.app/Apollo" | grep -A 2 LC_RPATH | grep "@executable_path/Frameworks" | wc -l | tr -d ' ')
          echo "Found $executable_path_count @executable_path/Frameworks LC_RPATH entries"
          if [ "$executable_path_count" -gt 1 ]; then
            echo "Removing duplicate @executable_path/Frameworks LC_RPATH entry..."
            install_name_tool -delete_rpath "@executable_path/Frameworks" "Payload/Apollo.app/Apollo"
            echo "Duplicate LC_RPATH entry removed"
          fi

          echo "Fake Signing Apollo Executable!"
          ldid -S -M "Payload/Apollo.app/Apollo"
          echo "Zipping ${OUTPUT_NAME}.ipa"
          zip -6 -rq "GLASS_${OUTPUT_NAME}.ipa" "Payload" -x "*/.*"

      - name: Build no extension modified .ipa
        env:
            OUTPUT_NAME: ${{ steps.download-files.outputs.OUTPUT_NAME }}
        working-directory: NO-EXTENSIONS_${{ steps.download-files.outputs.OUTPUT_NAME }}
        run: |
          cyan -i "${GITHUB_WORKSPACE}/Apollo.ipa" -o "Payload/Apollo.app" -f "${GITHUB_WORKSPACE}/improvedcustomapi.deb" --fakesign -e
          echo "Zipping NO-EXTENSIONS_${OUTPUT_NAME}.ipa"
          zip -6 -rq "NO-EXTENSIONS_${OUTPUT_NAME}.ipa" "Payload" -x "*/.*"

          echo "Updating build version in Apollo Executable!"
          echo "Previous $(vtool -show-build Payload/Apollo.app/Apollo)"
          vtool -set-build-version ios 15.0 19.0 -replace -output "Payload/Apollo.app/Apollo" "Payload/Apollo.app/Apollo"
          echo "Updated $(vtool -show-build Payload/Apollo.app/Apollo)"

          echo "Checking for duplicate LC_RPATH entries..."
          executable_path_count=$(otool -l "Payload/Apollo.app/Apollo" | grep -A 2 LC_RPATH | grep "@executable_path/Frameworks" | wc -l | tr -d ' ')
          echo "Found $executable_path_count @executable_path/Frameworks LC_RPATH entries"
          if [ "$executable_path_count" -gt 1 ]; then
            echo "Removing duplicate @executable_path/Frameworks LC_RPATH entry..."
            install_name_tool -delete_rpath "@executable_path/Frameworks" "Payload/Apollo.app/Apollo"
            echo "Duplicate LC_RPATH entry removed"
          fi

          echo "Fake Signing Apollo Executable!"
          ldid -S -M "Payload/Apollo.app/Apollo"
          echo "Zipping NO-EXTENSIONS_GLASS_${OUTPUT_NAME}.ipa"
          zip -6 -rq "NO-EXTENSIONS_GLASS_${OUTPUT_NAME}.ipa" "Payload" -x "*/.*"

      - name: Generate release notes
        env:
          APOLLO_VERSION: ${{ steps.download-files.outputs.APOLLO_VERSION }}
          RELEASE_TAG: ${{ steps.get-release.outputs.RELEASE_TAG }}
          RELEASE_NOTES: ${{ steps.get-release.outputs.RELEASE_NOTES }}
        run: |
          if [ -z "${APOLLO_VERSION}" ] || [ -z "${RELEASE_TAG}" ] || [ -z "${RELEASE_NOTES}" ]; then
            echo "Error: Missing required information for generating release notes!"
            exit 1
          fi

          {
            echo "Apollo version: \`v${APOLLO_VERSION}\`"
            echo "ImprovedCustomApi version: \`${RELEASE_TAG}\`"
            echo ""
            echo "## Release Notes"
            echo "$RELEASE_NOTES"
            echo "## Known Issues"
            echo "- Apollo Ultra features may cause app to crash"
            echo "- Imgur multi-image upload"
            echo "- Uploads usually fail on the first attempt but subsequent retries should succeed"
            echo "- Share URLs in private messages and long-tapping them still open in the in-app browser"
          } >> RELEASE_NOTES.md

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.download-files.outputs.APOLLO_VERSION }}_${{ steps.download-files.outputs.ICA_VERSION }}
          name: Apollo v${{ steps.download-files.outputs.APOLLO_VERSION }} with ImprovedCustomApi v${{ steps.download-files.outputs.ICA_VERSION }}
          body_path: RELEASE_NOTES.md
          files: |
            ${{ steps.download-files.outputs.OUTPUT_NAME }}/${{ steps.download-files.outputs.OUTPUT_NAME }}.ipa
            ${{ steps.download-files.outputs.OUTPUT_NAME }}/GLASS_${{ steps.download-files.outputs.OUTPUT_NAME }}.ipa
            NO-EXTENSIONS_${{ steps.download-files.outputs.OUTPUT_NAME }}/NO-EXTENSIONS_${{ steps.download-files.outputs.OUTPUT_NAME }}.ipa
            NO-EXTENSIONS_${{ steps.download-files.outputs.OUTPUT_NAME }}/NO-EXTENSIONS_GLASS_${{ steps.download-files.outputs.OUTPUT_NAME }}.ipa

      - name: Upload to catbox
        if: env.CATBOX_UPLOAD == 'true'
        env:
          OUTPUT_NAME: ${{ steps.download-files.outputs.OUTPUT_NAME }}
        run: |
          if [ -z "${APOLLO_VERSION}" ] || [ -z "${ICA_VERSION}" ]; then
            echo "Error: Missing required information for uploading to Catbox!"
            exit 1
          fi

          CATBOX_URL=$(curl -F "fileToUpload=@${OUTPUT_NAME}/${OUTPUT_NAME}.ipa" https://catbox.moe/user/api.php)
          CATBOX_URL_GLASS=$(curl -F "fileToUpload=@${OUTPUT_NAME}/GLASS_${OUTPUT_NAME}.ipa" https://catbox.moe/user/api.php)

          CATBOX_URL_NO_EXT=$(curl -F "fileToUpload=@NO-EXTENSIONS_${OUTPUT_NAME}/NO-EXTENSIONS_${OUTPUT_NAME}.ipa" https://catbox.moe/user/api.php)
          CATBOX_URL_NO_EXT_GLASS=$(curl -F "fileToUpload=@NO-EXTENSIONS_${OUTPUT_NAME}/NO-EXTENSIONS_GLASS_${OUTPUT_NAME}}.ipa" https://catbox.moe/user/api.php)

          echo "CATBOX_URL=${CATBOX_URL}" >> "$GITHUB_ENV"
          echo "CATBOX_URL_GLASS=${CATBOX_URL_GLASS}" >> "$GITHUB_ENV"
          echo "CATBOX_URL_NO_EXT=${CATBOX_URL_NO_EXT}" >> "$GITHUB_ENV"
          echo "CATBOX_URL_NO_EXT_GLASS=${CATBOX_URL_NO_EXT_GLASS}" >> "$GITHUB_ENV"

      - name: Update source files
        env:
          RELEASE_TAG: ${{ steps.get-release.outputs.RELEASE_TAG }}
        run: |
          python update_json.py

          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

          git add apps.json apps_noext.json

          if git diff --cached --quiet; then
            echo "No changes detected, skipping commit."
          else
            git fetch origin main

            git checkout -b new-release origin/main
            git checkout --detach HEAD

            git commit -m "update version to $RELEASE_TAG"

            git checkout new-release
            git cherry-pick HEAD@{1}

            git push origin new-release:main
          fi

      - name: Job summary
        run: |
          echo "### 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ New release created: v${{ steps.download-files.outputs.APOLLO_VERSION }}-${{ steps.download-files.outputs.ICA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.download-files.outputs.APOLLO_VERSION }}_${{ steps.download-files.outputs.ICA_VERSION }})" >> $GITHUB_STEP_SUMMARY
